/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Write your model definitions here
 */

namespace org.smartfoodnetwork.scm

enum ProductType {
  o EGG
}

/**
 * The movement status for egg
 */
enum MovementStatus {
  o IN_FARM
  o EXPORTER
  o IMPORTER
  o SUPERMARKET
  o IN_LABRATORY
  o IN_TRANSIT
}


/**
 * The production type associated with an egg
 */
enum ProductionType {
  o CAGE
  o FREE_RANGE
  o ORGANIC
  o BARN_LAID
  o OTHER
}

/**
 * A Farmer participant
 */
abstract participant User identified by email {
  o String email
  o String firstName
  o String middleName
  o String lastName
}

/**
 * A Farmer participant

participant Farmer identified by farmerId {
    o String farmerId
    o String address
    o String county
    o String postcode
    o String email
    o String companyRating
}
 */
participant labratory identified by labratoryId {
  o String labratoryId
  o String email
  o String companyId
  o String companyIdType
  o String certification
  o String rating
}

/**
 * A Exporter participant
 */
participant Exporter identified by exporterId {
  o String exporterId
  o String exporterLicenseNumber
  o String address
  o String postcode
  o String email  
  o String companyName
  o String companyId
  o String companyIdType  //enum = [CoC, KvK]
  o String profileType
  o String certification
 o String companyRating
}

/**
 * A Importer participant
 */
participant Importer identified by importerId {
  o String importerId
  o String importerLicenceNumber  
  o String address
  o String postcode
  o String email    
  o String companyName  
  o String companyId
  o String companyIdType //enum = [CoC, KvK]
  o String profileType   
  o String companyDescription
  o String companyRating
}

/**
 * A Logistics participant
 */
participant Logistics identified by logisticsCoId {
  o String logisticsCoId
  o String companyName   
  o String internationalPermit
  o String companyDescription
  o String logisticProductId
  o String certification
  o String companyId
  o String companyIdType //enum = [CoC, KvK]
  o String companyRating 
}

participant InsuranceCo identified by insuranceCoId {
  o String insuranceCoId 
  o String companyName	
  o String emailId	
  o String address
  o String profileType
  o String companyId
  o String companyIdType //enum = [CoC, KvK]
  o String companyDescription	
  o String insuranceProductId	
  o String companyRating 
}

participant WholeSaleCo identified by wholeSaleCoId{
  o String wholeSaleCoId
  o String companyName	
  o String emailId	
  o String address
  o String companyId
  o String companyIdType //enum = [CoC, KvK]
  o String companyDescription	 
  o String companyRating  
}

participant SuperMarket identified by superMarketId{
  o String superMarketId
  o String companyName	
  o String emailId	
  o String address
  o String companyId
  o String companyIdType //enum = [CoC, KvK]
  o String companyDescription	 
  o String companyRating  
}


/**
 * A Poultry asset. A Poultry is related to poultry
 */
asset Poultry identified by cph {
  o String cph  
  o String name
  --> Business business
}


/**
 * Egg packet, which is related to a Poultry
 */
asset Packet identified by packetId {
    o String packetId
    o String batchId    
    o ProductType product
    o MovementStatus movementStatus
    o ProductionType productionType
    --> Poultry location optional
    --> Farmer owner
}


asset FarmProduct identified by productId{
      //o String farmProductId
      o String productName	
      o String productId	
      o String productType	
      o String quality	
      o String certification 	
      o String productionDate	
      o String expiryDate	
      o String batchId 	
      o String location	
      o String remarks 
      o String quantity 
      o String owner 
      o String ownerRating 
      o String productRating 
      o String price 
}

asset InsuranceProduct identified by insuranceProductId{
      o String insuranceProductId
      o String insuranceType	
      o String insurancePrice	
      o String productId 	
}

asset LogisticProduct identified by logisticProductId{
  o String logisticProductId
  o String type	
  o String LicenseId	
  o String batchId	
  o String productId 	
  o String description	
  o String price	
  o String rating
}

/**
 * A Business asset which is owned by a Farmer, is related to a list of batch and has a list of incoming packets.
 */
asset Business identified by sbi {
     o String sbi
     o String address1
     o String address2
     o String county
     o String postcode
     --> Farmer owner
     --> Packet[] incomingPackets optional
}

/**
 * An abstract transaction type for packet movements
 */
abstract transaction PacketMovement {
  o String[] logs optional
    --> Packet packet
    --> Business from
    --> Business to
}

/**
 * An abstract transaction type for import request
 */
asset ImportRequest identified by ImportRequestId {
  o String ImportRequestId
  o ProductionType productionType
  o String quantity
  o String fdaApprovalId
  o String batchId  
  o String productId
  o String address  
  o String exporter
}

/**Purchase order */
asset PurchaseOrder identified by requestId{
  o String requestId
  o String productId
  o String email
  o String productName
  o String quantity
  o String price
  o String deliveryDate
  o String expiryDate
  o String deliveryAddress  
  o String remark
  o String approvalFlag default="N"
  o String buyerCompanyName
  o String sellerCompanyName
  o String buyerEmail
  o String sellerEmail
  o String salesAgreement default="not available"

}

/**RequestPO asset */
asset RequestPO identified by requestId {
  o String requestId
  o String productId
  o String quantity
  o String deliveryAddress
  o String deliveryDate
  o String remark  
  o String buyerCompanyName
  o String sellerCompanyName
  o String buyerEmail
  o String sellerEmail
}

asset LetterOfCredit identified by productId{
  o String transactionId
  o String productId
  o String insuranceId
  o String salesAgreement
  o String applicantBankAccountNumber
  o String applicantBank
  o String beneficiaryBankAccountNumber
  o String beneficiaryBank
  o String ammoutOfLC
  o String dateOfIssue
  o String dateOfExpire
  o String Remark
  }

asset transactionStatus identified by txnId{
  o String txnId
  o String productPORequest
  o String productpoApproval
  o String productSalesAgreemnt
  o String insurancePoRequest
  o String insurancePoApproval
  o String insuranceSalesAgreemnt
  o String logisticsPoRequest
  o String logisticsPoApproval
  o String logisticsSalesAgreemnt
  o String requestLC
  o String approveLC
  o String letterOfCredit
  o String regulatorCheck
  o String issueBOL
  o String pickUp
  o String partialLCExecution
  o String delivery
  o String complteLcExecution
}

/**
 * An abstract type for farmer agreement
 */
abstract transaction FarmerAgreement {
  o String quantity
  o String address
}

/**
 * Defines a service contract between a Exporter and an Importer
 */
asset SA_Exporter_Importer identified by saEIId {
  o String saEIId
  --> Exporter exporter
  --> Importer importer
  o String dateOfAgreement
  o String startDate
  o String endDate  
  o String goodsDescription  
  o String quantity
  o String payment
  o String paymentType
  o String delivery
  o String logistics
  o String insurance
  o String warranty
  o String breachOfConduct
  o String confidentiality
  o String severability
  o String legal  
}

/**
 * Defines a service contract between a Farmer and an Exporter
 */
asset SA_Exporter_Farmer identified by saEFId {
  o String saEFId
  --> Exporter exporter
  --> Farmer farmer
  --> Importer importer
  o String dateOfAgreement
  o String startDate
  o String endDate  
  o String PO
  o String goodsDescription  
  o String quantity
  o String payment
  o String paymentType
  o String delivery
  o String logistics
  o String insurance
  o String warranty
  o String breachOfConduct
  o String confidentiality
  o String severability
  o String legal  
}

/**
 * Defines an Insurance Agreement
 */
asset InsuranceAgreement identified by insuranceAgreement{
  o String insuranceAgreement
  o String serviceBuyer	
  o String insuranceProduct	
  o String dateOfAgreement	
  o String insuranceStartDate	
  o String insuranceEndDate	
  o String goodsDescribtion	
  o String quantity	
  o String payment	
  o String paymentType	
  o String insurance
  o String breachOfConduct	
  o String confidentiality	
  o String severability	
  o String legal
}

asset LogiscticAgreement identified by logisticAgreementId{
  o String logisticAgreementId
  o String serviceBuyer	
  o String logesticProduct	
  o String dateoFAgreement	
  o String goodsDescribtion	
  o String startDate	
  o String endDate	
  o Route	route
  o String quantity	
  o String payment	
  o String paymentType	
  o String pickUp	
  o String delivery	
  o String insurance	
  o String warranty	
  o String breachOfConduct	
  o String confidentiality	
  o String severability	
  o String legal	
  o String rating  
}

asset ServiceProduct identified by productId{
   o String seller
   o String serviceName
   o String serviceType
   o String productId
   o String certification
   o String location
   o String productRating
   o String sellerRating
   o String price
   o String remark
   o String sla
}

/**Transaction for creating batch */
transaction CreateBatch{
  o ProductType productType
  o ProductionType productionType
  o String farmerId
}

transaction UpdateBatch{
  o String batchId
  o ProductType productType
  o ProductionType productionType
  o String farmerId
}

event UpdateBatchEvent {
  o String batchId
  o ProductType productType
  o ProductionType productionType
  o String farmerId
}
/**
 * A transaction type for creating an import request
 */
transaction CreateImportRequest {
}

/**
 * A transaction type for placing an import request
 */
transaction PlaceImportRequest {
  o ProductionType productionType
  o String quantity
  o String address
  o String postcode
  o String importerId
}

/**
 * A transaction type for egg packet leaving a farm
 */
transaction PacketMovementDeparture extends PacketMovement {
  --> Poultry fromPoultry
}

transaction CreateFarmProduct {
  o FarmProduct farmProduct
}

event CreateFarmProductEvent {
  o String productId
}

event CreateBatchEvent {
  o String batchId
}

event CreatePurchaseOrderEvent {
  o String productId
}

event ApprovePurchaseOrderEvent {
  o String productId
}

/**
 * An event for egg packet leaving a farm
 */
event PacketMovementEvent {
  --> Poultry fromPoultry
}

/**
 * A transaction type for an egg packet arriving at a Warehouse
 */
transaction PakcetMovementArrival extends PacketMovement {
  --> Poultry arrivalWarehouse
}

transaction CreatePurchaseOrder{
  o PurchaseOrder purchaseOrder
}

transaction ApprovePurchaseOrder{
  o PurchaseOrder purchaseOrder
}

//already covered in the query
transaction RequestPurchaseOrder{
  o String productId
  o String exporterId
  o String quantity
  o String deliveryAddress
  o String companyName
  o String deliveryDate
  o String remark
}

transaction confirmOrder{

}

/**
 * An event for egg packet arriving at farm
 */
event PacketMovementArrivalEvent {
  --> Poultry arrivalWarehouse
}

/**
 * An event for egg packet arriving at farm
 */
event PlaceImportRequestEvent {
  //--> Poultry arrivalWarehouse
  o String importRequestId
}

concept Route {
  o   String    origin
  o   String    destination
  o   DateTime  schedule  
}

/**
 * Type of company id
 */
enum companyIdType {
  o CoC
  o KvK
}

/**
 * Package, which is related to a Poultry
 */
asset SmartFood identified by smartFoodId {
    o String smartFoodId
    o String requestId
    o String batchId    
    o ProductType product
    o MovementStatus movementStatus
    o ProductionType productionType
    o String buyer
    o String seller
    o String owner
}

/**
 * A transaction type for an package leaving a location
 */
transaction transferSmartFood {
    o String smartFoodId
    o String requestId
    o String batchId    
    o ProductType product
    o MovementStatus movementStatus
    o ProductionType productionType
    o String buyer
    o String seller
    o String owner
}

/**
 * A transaction type for an package leaving a location
 */
transaction transferSmartFood1 {
    o String smartFoodId
    o String requestId
    o String batchId    
    o ProductType product
    o MovementStatus movementStatus
    o ProductionType productionType
    o String buyer
    o String seller
    o String owner
}
  
  
event transferSmartFoodEvent{
  o String buyer
  o String seller
  o String requestId
  o String smartFoodId
}





//////////////////////////////

participant Actors identified by participantId {
  o String participantId
  o String phoneNo
  o String address
  o String email  
  o String participantType
}

participant Fridge identified by participantId {
  o String participantId
  o String phoneNo
  o String address
  o String email  
}

participant Farmer identified by participantId {
  o String participantId  
  o String phoneNo
  o String address
  o String email  
}

participant Seller identified by participantId {
  o String participantId  
  o String phoneNo
  o String address
  o String email  
}

asset Product identified by productCode{
  o String productCode
  o String sender 
  o String receiver 
  o String receiverType
}

transaction CreateProduct{
  o String sender 
  o String receiver 
  o String productCode
  o String receiverType
}

event CreateProductEvent {
  o String sender 
  o String receiver 
  o String productCode
  o String receiverType
}

transaction UpdateProduct{
  o String sender
  o String receiver 
  o String productCode
  o String receiverType
}

event UpdateProductEvent {
  o String sender
  o String receiver 
  o String productCode
  o String receiverType
}

asset Alert identified by alertId{
  o String alertId
  o String triggerId
  o String productCode 
 // o String phoneNumber //send alert using SMS
  o String alertDetails
  o String severity
  o String assesedBy //participantId
  o String status default="ACTIVE" //enum: {"ACTIVE","INACTIVE"}
}

asset AlertSent identified by alertSentId{
  o String alertSentId
  o Alert alert
  o String deviceAddressId 
  o String deviceAddressType default="FRIDGE"
  o String time
}

//will be picked by Andre
asset Trigger identified by triggerId{
  o String triggerId
  o String productCode
  o String recordedBy
  o String severity default="none"
  o String status default="TO-ACCESS" //enum: {"TO-ACCESS","PROCESSED","IN_PROGRESS"}
}

//logic to be written
transaction UpdateTrigger{
  o String triggerId
  o String productCode
  o String recordedBy
  o String severity default="none"
  o String status default="TO-ACCESS" //enum: {"TO-ACCESS","PROCESSED","IN_PROGRESS"}
}
//logic to be written
event UpdateTriggerEvent {
  o String triggerId
  o String productCode
  o String recordedBy
  o String severity default="none"
  o String status default="TO-ACCESS" //enum: {"TO-ACCESS","PROCESSED","IN_PROGRESS"}
}

//logic to be written
transaction UpdateAlert{
  o String triggerId
  o String productCode
  o String recordedBy
  o String severity default="none"
  o String status default="TO-ACCESS" //enum: {"TO-ACCESS","PROCESSED","IN_PROGRESS"}
}
//logic to be written
event UpdateAlertEvent {
  o String triggerId
  o String productCode
  o String recordedBy
  o String severity default="none"
  o String status default="TO-ACCESS" //enum: {"TO-ACCESS","PROCESSED","IN_PROGRESS"}
}
